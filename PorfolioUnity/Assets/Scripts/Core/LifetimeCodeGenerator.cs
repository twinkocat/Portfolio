using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using UnityEngine;
using UnityEditor;

public class LifetimeCodeGenerator
{
    public static void GenerateRegistrationCode<TBase, TConfigurator>(
        Func<Type, string> registrationLineGenerator,
        string assetPath = "Scripts/GENERATED/")
    {
        var configuratorType = typeof(TConfigurator);
        var baseType = typeof(TBase);
        var assembly = Assembly.GetAssembly(baseType);
        var types = assembly.GetTypes()
            .Where(t => baseType.IsAssignableFrom(t) && t.IsClass && !t.IsAbstract)
            .ToList();

        Debug.Log($"Found {types.Count} types of [{baseType.Name}] for registration.");

        var code = new StringBuilder();
        code.AppendLine("// <auto-generated>");
        code.AppendLine("// This file is generated automatically after scripts reload.");
        code.AppendLine("// </auto-generated>");
        code.AppendLine();
        code.AppendLine("using VContainer;");
        code.AppendLine("using VContainer.Unity;");
        code.AppendLine();
        code.AppendLine($"public partial class {configuratorType.Name}");
        code.AppendLine("{");
        code.AppendLine($"    partial void Configure_Internal(IContainerBuilder builder)");
        code.AppendLine("    {");

        foreach (var type in types)
        {
            code.AppendLine($"        {registrationLineGenerator(type)}");
        }

        code.AppendLine("    }");
        code.AppendLine("}");

        var folderPath = Path.Combine(Application.dataPath, assetPath);
        var fullPath = Path.Combine(folderPath, $"{configuratorType.Name}.generated.cs");
        
        Directory.CreateDirectory(folderPath);
        File.WriteAllText(fullPath, code.ToString());
        AssetDatabase.Refresh();
    }
}